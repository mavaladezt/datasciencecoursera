x<-matrix(1:25,5,5)
makeCacheMatrix <- function(x = matrix()) {
#
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
# Return matrix inverse
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
return(m)
}
cacheSolve(x)
makeCacheMatrix(x)
traceback()
x
makeCacheMatrix(x)
## Caches the inverse of a matrix
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
## computes the inverse of a matrix
cacheSolve <- function(x, ...) {
cachem <- x["get"] ## Retrieve matrix in cache
if(identical(x, cachem)) {	## Check if identical
message("getting cached data")
return(m)
}
inv <- solve(x) ## Return a matrix that is the inverse of 'x'
x["setinverse"] <- inv
inv
}
cacheSolve(x)
makeCacheMatrix(x)
makeCacheMatrix()
abc<-x
abc
makeCacheMatrix(abc)
a=makeCacheMatrix(abc)
a
print(a)
b=as.list(a)
b
cacheSolve(abc)
cacheSolve(data)
cacheSolve(m)
matrix
x
aVector <- makeVector(1:10)
aVector$get()               # retrieve the value of x
aVector$getmean()           # retrieve the value of m, which should be NULL
aVector$set(30:50)          # reset value with a new vector
cachemean(aVector)          # notice mean calculated is mean of 30:50, not 1:10
aVector$getmean()           # retrieve it directly, now that it has been cached
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
#
#
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
aVector <- makeVector(1:10)
aVector$get()               # retrieve the value of x
aVector$getmean()           # retrieve the value of m, which should be NULL
aVector$set(30:50)          # reset value with a new vector
cachemean(aVector)          # notice mean calculated is mean of 30:50, not 1:10
aVector$getmean()           # retrieve it directly, now that it has been cached
aVector$get()
aVector$getmean()
rm(list=ls())
makeCacheMatrix <- function(x = matrix()) {
#
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
# Return matrix inverse
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
return(m)
}
makeVector <- function(x = numeric()) {
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setmean <- function(mean) m <<- mean
getmean <- function() m
list(set = set, get = get,
setmean = setmean,
getmean = getmean)
}
#
#
cachemean <- function(x, ...) {
m <- x$getmean()
if(!is.null(m)) {
message("getting cached data")
return(m)
}
data <- x$get()
m <- mean(data, ...)
x$setmean(m)
m
}
vector=(1:10)
aVector <-makeVector(vector)
x=matrix(1:9,3,3)
amatrix=makeCacheMatrix(x)
amatrix
amatrix
amatrix=makeCacheMatrix(x)
amatrix$get()
amatrix$set(x)
amatrix$get()
amatrix$set(matrix(1:16,4,4))
amatrix$get()
cacheSolve(amatrix)
solve(x,x)
m1 <- matrix(c(1/2, -1/4, -1, 3/4), nrow = 2, ncol = 2)
makeCacheMatrix(m1)
makeCacheMatrix$get
solve(m1)
solve(n1)
n1 <- matrix(c(6,2,8,4), nrow = 2, ncol = 2)
solve(n1)
myMatrix_object <- makeCacheMatrix(m1)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
> myMatrix_object$set(n2)
> # and obtain its matrix inverse by
> cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
> myMatrix_object$set(n2)
> # and obtain its matrix inverse by
> cacheSolve(myMatrix_object)
n2 <- matrix(c(5/8, -1/8, -7/8, 3/8), nrow = 2, ncol = 2)
n2
myMatrix_object$set(n2)
cacheSolve(myMatrix_object)
cacheSolve(myMatrix_object)
