?ssapply
?sapply
help('apply')
library(ggplot2)
5 %%2
5%/%2
a="Hello"
class(a)
a=2
class(a)
a=T
class(a)
a=as.character(a)
class(a)
a
?seq
seq(1,10,2)
seq(1,10,-1)
seq(1,10,1.5)
seq(1,10,1.7)
rnorm(10)
rnorm(10)
runif(5)
?runif
runif(0,5)
runif(0,5,10)
runif(10)
runif(10,min=0,max=10)
x=c(1,2,3,4,5)
sample(x,size=10,replace=T)
x
x[1:2]
x=c("a","b","c")
x[1]
x[2:3]
x[-1]
v=10:15
class(v)
v
z=c(10:15)
class(z)
v
z
v[2:3]
z[2:3]
length(z)
x=10:50
x
x[x>35]
x[x>35 & x<45]
x[x>35 | x<45]
x[x>min(x) & x<max(x)]
v
?solve
?matrix
x<-matrix(1:25,5,5)
x
solve(x)
class(x)
dim(x)
?solve
?inverse
makeCacheMatrix <- function(x = matrix()) {
#
m <- NULL
set <- function(y) {
x <<- y
m <<- NULL
}
get <- function() x
setinverse <- function(inverse) m <<- inverse
getinverse <- function() m
list(set = set, get = get,
setinverse = setinverse,
getinverse = getinverse)
}
cacheSolve <- function(x, ...) {
# Return matrix inverse
m <- x$getinverse()
if(!is.null(m)) {
message("getting cached inverse matrix")
return(m)
}
data <- x$get()
m <- solve(data)
x$setinverse(m)
return(m)
}
cacheSolve(x)
cacheSolve()
matrix
x
makeCacheMatrix(x)
debug()
makeCacheMatrix(x)
set.seed(1)
rpois(5, 2)
a=rpois(5, 2)
class(a)
set.seed(1)
rpois(5, 2)
?ppois
?qpois
?dpois
set.seed(10)
x <- rep(0:1, each = 5)
e <- rnorm(10, 0, 20)
y <- 0.5 + 2 * x + e
plot(x,y)
?rbinom
library(datasets)
Rprof()
fit <- lm(y ~ x1 + x2)
Rprof(NULL)
?system.time
library(swirl)
swirl()
ls()
class(plants)
View(plants)
View(plants)
dim(plants)
nrow(plants)
ncol(plants)
object.size(plants)
names(plants)
head(plants)
head(plants,10)
tail(plants,15)
summary(plants)
table(plants$Active_Growth_Period)
str(plants)
?sample
sample(1:6,4,replace=T)
sample(1:6,4,replace=TRUE)
sample(1:6,4,replace=TRUE)
sample(1:20,10)
LETTERS
LETTERS
sample(LETTERS)
sample(c(0,1),100,replace=TRUE,prob=c(0.3,.7))
sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips <- sample(c(0,1),100,replace=TRUE,prob=c(0.3,0.7))
flips
sum(flips)
?rbinom
rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(1, size = 100, prob = 0.7)
flips2 <- rbinom(100, size = 1, prob = 0.7)
flips2
sum(flips2)
?rnorm
rnorm(10)
rnorm(10,100,25)
?rpois
rpois(5,10)
replicate(100,rpois(5,10))
my_pois <- replicate(100, rpois(5, 10))
my_pois
table(my_pois)
View(my_pois)
View(my_pois)
View(my_pois)
colMeans(my_pois)
cm <- colMeans(my_pois)
hist(cm)
data(cars)
?cars
head(cars)
plot(cars)
?plot
plot(x = cars$speed, y = cars$dist)
plot(y = cars$speed, x = cars$dist)
plot(x = cars$speed, y = cars$dist)
plot(x = cars$speed, y = cars$dist, xlab = "Speed")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(x = cars$speed, y = cars$dist, ylab = "Stopping Distance")
plot(x = cars$speed, y = cars$dist, xlab = "Speed",ylab="Stopping Distance")
plot(cars)
plot(cars, main = "My Plot")
plot(cars, subtitle = "My Plot")
plot(cars, sub = "My Plot Subtitle")
plot(cars, col=2)
plot(cars, xlim = c(10, 15))
plot(cars, pch = 2
)
mtcars
data(mtcars)
?boxplot
boxplot(formula = mpg ~ cyl, data = mtcars)
hist(mtcars$mpg)
exit()
source('rankhospital.R')
setwd("~/Dropbox/School/Coursera Johns Hopkins Data Science R/datasciencecoursera/assignment_03/rprog-data-ProgAssignment3-data")
source('rankhospital.R')
newdata
source('rankhospital.R')
newdata
View(newdata)
newdata[,2]>16
newdata[newdata[,2]>16]
newdata[newdata[,2]>16,]
newdata
nrow(newdata
)
nrow(newdata)
na.omit(newdata)
newdata=na.omit(newdata)
nrow(newdata)
source('rankhospital.R')
source('rankhospital.R')
View(newdata)
source('rankhospital.R')
source('rankhospital.R')
source('rankhospital.R')
rankhospital("TX", "heart failure", 4)
rankhospital("MD", "heart attack", "worst")
source('rankhospital.R')
rankhospital("MD", "heart attack", "worst")
rankhospital("MN", "heart attack", 5000)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data$State)
length(states)
for (i in 1:length(states))
print(i)
for (i in 1:length(states)){
print(states[i])
#        rankhospital(states[i], outcome, num))
}
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data$State)
rankings <- data.frame(hospital=character(),
state=states,
stringsAsFactors=FALSE)
?rep
rankings <- data.frame(hospital=rep('',times=length(states)),
state=states,
stringsAsFactors=FALSE)
View(rankings)
rankings <- data.frame(hospital=rep('',times=length(states)),
state=rep('',times=length(states),
stringsAsFactors=FALSE)
)
rankings <- data.frame(hospital=rep('',times=length(states)),
state=rep('',times=length(states)),
stringsAsFactors=FALSE)
View(rankings)
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data$State)
rankings <- data.frame(hospital=rep('',times=length(states)),
state=rep('',times=length(states)),
stringsAsFactors=FALSE)
source('rankall.R')
View(rankings)
View(data)
View(rankings)
View(newdata)
source('rankhospital.R')
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data$State)
states
rankings <- data.frame(hospital=rep('',times=length(states)),
state=rep('',times=length(states)),
stringsAsFactors=FALSE)
for (i in 1:length(states)){
print(states[i])
#        rankings[i,2] <- states[i]
print(rankhospital(states[i], outcome, num))
#        rankings[i,1] <- rankhospital(states[i], outcome, num)
}
outcome='heart failure'
for (i in 1:length(states)){
print(states[i])
#        rankings[i,2] <- states[i]
print(rankhospital(states[i], outcome, num))
#        rankings[i,1] <- rankhospital(states[i], outcome, num)
}
num=2
for (i in 1:length(states)){
print(states[i])
#        rankings[i,2] <- states[i]
print(rankhospital(states[i], outcome, num))
#        rankings[i,1] <- rankhospital(states[i], outcome, num)
}
states[1]
rankings[i,2] <- states[1]
rankings[1,2] <- states[1]
View(rankings)
source('rankall.R')
newdata<-rankall('heart failure',1)
source('rankall.R')
newdata<-rankall('heart failure',1)
View(newdata)
newdata<-rankall('heart failure',10)
View(rankings)
View(newdata)
source('rankall.R')
newdata<-rankall('heart failure',10)
View(newdata)
newdata<-rankall('heart failure',100)
View(newdata)
source('rankall.R')
newdata<-rankall('heart failure',1)
View(newdata)
source('rankall.R')
newdata<-rankall('heart failure',1)
View(newdata)
newdata<-rankall('heart failure',100)
View(rankings)
View(newdata)
head(rankall("heart attack", 20), 10)
source('rankall.R')
source('rankall.R')
head(rankall('heart failure',1))
source('rankall.R')
head(rankall('heart failure',1))
outcome='heart failure'
num=1
data <- read.csv("outcome-of-care-measures.csv", colClasses = "character")
states <- unique(data$State)
rankings <- data.frame(hospital=rep('',times=length(states)),
state=rep('',times=length(states)),
stringsAsFactors=FALSE)
ifelse(outcome == 'heart attack',column <- 11,ifelse(outcome == 'heart failure',column <- 17,ifelse(outcome == 'pneumonia',column <-23,stop("invalid outcome"))))
states
i-1
i <-1
rankings[i,2] <- states[i]
View(rankings)
temp <- data[data$State == state[i],c(2,column)]
View(data)
rankings[i,2] <- states[i]
temp <- data[data$State == states[i],c(2,column)]
temp <- temp[order(temp[1]),]
temp <- temp[order(temp[2]),]
temp <- na.omit(temp)
total_rows <- nrow(temp)
source('rankall.R')
head(rankall('heart failure',1))
source('rankall.R')
head(rankall('heart failure',1))
table(rankall('heart failure',1))
newdata <- rankall('heart failure',1)
View(newdata)
head(rankall("heart attack", 20), 10)
best("SC", "heart attack")
source('best.R')
best("SC", "heart attack")
print(best("SC", "heart attack"))
best("NY", "pneumonia")
best("AK", "pneumonia")
rankhospital("NC", "heart attack", "worst")
rankhospital("WA", "heart attack", 7)
rankhospital("TX", "pneumonia", 10)
rankhospital("NY", "heart attack", 7)
r <- rankall("heart attack", 4)
as.character(subset(r, state == "HI")$hospital)
r <- rankall("pneumonia", "worst")
as.character(subset(r, state == "NJ")$hospital)
r <- rankall("heart failure", 10)
as.character(subset(r, state == "NV")$hospital)
r <- rankall("pneumonia", "worst")
r
best('NJ','pneumonia')
rankhospital('NJ','pneumonia','worst')
rankhospital('NV','pneumonia',10)
rankhospital('NV','heart failure',10)
